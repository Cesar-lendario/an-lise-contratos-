// Servidor com prompt personalizado solicitado pelo usu√°rio
import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';
import os from 'os';
import multer from 'multer';
import mammoth from 'mammoth';
import axios from 'axios';
import pdfParse from 'pdf-parse';

// Importamos a biblioteca pdf-parse apenas quando necess√°rio para processamento
// Se estiver ocorrendo erro com arquivo de teste da biblioteca, podemos criar o diret√≥rio
try {
  const testDir = path.join(__dirname, 'test', 'data');
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }
} catch (err) {
  console.log('Aviso: N√£o foi poss√≠vel criar o diret√≥rio de teste:', err);
}

// Importando m√≥dulos do banco de dados
import { testConnection } from './src/lib/db/config.js';
import { 
  criarTabelaContratos,
  adicionarContrato,
  buscarTodosContratos,
  buscarContratoPorId,
  atualizarContrato,
  excluirContrato 
} from './src/lib/db/models/contrato.js';

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o b√°sica
const app = express();
const PORT = 3000;

// Configura√ß√£o aprimorada para CORS
app.use((req, res, next) => {
  // Permitir requisi√ß√µes da aplica√ß√£o Vite e de qualquer origem durante desenvolvimento
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  res.setHeader('Access-Control-Allow-Credentials', 'true');
  res.setHeader('Access-Control-Max-Age', '86400'); // 24 horas
  
  // Responder imediatamente a requisi√ß√µes OPTIONS (preflight)
  if (req.method === 'OPTIONS') {
    return res.status(204).end();
  }
  
  next();
});

// Adicionar o middleware cors padr√£o para garantir compatibilidade
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin'],
  credentials: true
}));

// Configurar armazenamento para upload de arquivos
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    // Criar pasta de uploads se n√£o existir
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: function (req, file, cb) {
    // Aceitar apenas arquivos txt, pdf e docx
    if (file.mimetype === 'text/plain' ||
        file.mimetype === 'application/pdf' ||
        file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
      cb(null, true);
    } else {
      cb(new Error('Formato de arquivo n√£o suportado. Use apenas TXT, PDF ou DOCX.'), false);
    }
  }
});

// Middleware para processar JSON
app.use(express.json({ limit: '50mb' }));
app.use(express.text({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Configura√ß√£o de tipos MIME
const mimeTypes = {
  '.html': 'text/html',
  '.js': 'text/javascript',
  '.css': 'text/css',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
  '.tsx': 'application/javascript',
  '.ts': 'application/javascript'
};

// Middleware para definir tipos MIME corretos
app.use((req, res, next) => {
  const ext = path.extname(req.url);
  if (ext && mimeTypes[ext]) {
    res.setHeader('Content-Type', mimeTypes[ext]);
  }
  next();
});

// Servir arquivos est√°ticos
app.use(express.static(__dirname, {
  setHeaders: (res, path, stat) => {
    const ext = path.extname(path).toLowerCase();
    if (mimeTypes[ext]) {
      res.set('Content-Type', mimeTypes[ext]);
    }
  }
}));

// Rota para a p√°gina principal
app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'teste-upload.html'));
});

// Rota para a p√°gina de upload
app.get('/upload', function(req, res) {
  res.sendFile(path.join(__dirname, 'teste-upload.html'));
});

// Removemos a fun√ß√£o de extra√ß√£o simplificada pois agora usamos exclusivamente a API da OpenAI

// Fun√ß√£o para extrair texto dos diferentes tipos de arquivos
async function extractTextFromFile(filePath, fileType) {
  try {
    console.log(`Extraindo texto de: ${filePath} (${fileType})`);
    
    // Para arquivos de texto simples (TXT)
    if (fileType === 'text/plain') {
      return fs.readFileSync(filePath, 'utf8');
    }
    
    // Para arquivos PDF - usando exclusivamente a API da OpenAI
    else if (fileType === 'application/pdf') {
      try {
        console.log(`Processando PDF exclusivamente via OpenAI: ${path.basename(filePath)}`);
        
        // Ler o arquivo PDF como Buffer
        const pdfBuffer = fs.readFileSync(filePath);
        
        // Converter o PDF para base64
        const pdfBase64 = pdfBuffer.toString('base64');
        const fileName = path.basename(filePath);
        
        // Chamar a API da OpenAI para extrair o texto
        const textoExtraido = await extrairTextoPDFComOpenAI(pdfBase64, fileName);
        
        // Verificar se obtivemos um resultado v√°lido
        if (textoExtraido && textoExtraido.length > 0) {
          console.log(`PDF processado com sucesso via OpenAI: ${fileName} (${textoExtraido.length} caracteres)`);
          return textoExtraido;
        } else {
          throw new Error('A API da OpenAI n√£o retornou texto v√°lido');
        }
      } catch (pdfError) {
        console.error('Erro ao processar o PDF com OpenAI:', pdfError);
        throw new Error(`N√£o foi poss√≠vel extrair texto do PDF: ${pdfError.message}`);
      }
    }
    
    // Para arquivos DOCX
    else if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
      try {
        const docxBuffer = fs.readFileSync(filePath);
        const result = await mammoth.extractRawText({ buffer: docxBuffer });
        return result.value;
      } catch (docxError) {
        console.error('Erro ao extrair texto do DOCX:', docxError);
        throw new Error('N√£o foi poss√≠vel extrair texto do arquivo DOCX.');
      }
    }
    
    throw new Error('Formato de arquivo n√£o suportado.');
  } catch (error) {
    console.error('Erro na extra√ß√£o de texto:', error);
    throw error;
  }
}

// Chave da API da OpenAI
// Carrega as vari√°veis de ambiente do arquivo .env
require('dotenv').config();

// Obter a chave da API de forma segura
const getApiKey = () => {
  if (process.env.OPENAI_API_KEY) {
    return process.env.OPENAI_API_KEY;
  }
  console.warn('\x1b[33m%s\x1b[0m', '‚ö†Ô∏è ALERTA: Nenhuma chave de API encontrada! Configure OPENAI_API_KEY no arquivo .env');
  return 'SUA_CHAVE_API_AQUI'; // Certifique-se de substituir no .env antes de usar
};

const OPENAI_API_KEY = getApiKey();

// Armazenar temporariamente o √∫ltimo texto de contrato analisado
let ultimoTextoAnalisado = null;
const API_URL = "https://api.openai.com/v1/chat/completions";
const VISION_API_URL = "https://api.openai.com/v1/chat/completions";

// Fun√ß√£o para extrair texto de PDF usando pdf-parse localmente
async function extrairTextoPDFComOpenAI(pdfBase64, fileName) {
  console.log(`üìÑ Processando PDF: ${fileName}`);
  
  try {
    // Decodificar o base64 para um buffer
    const pdfBuffer = Buffer.from(pdfBase64, 'base64');
    
    console.log(`üîç Extraindo texto do PDF usando pdf-parse localmente...`);
    
    // Usar pdf-parse para extrair o texto do PDF
    const pdfData = await pdfParse(pdfBuffer);
    
    // Verificar se obtivemos um resultado v√°lido
    if (!pdfData || !pdfData.text || pdfData.text.trim().length === 0) {
      throw new Error('N√£o foi poss√≠vel extrair texto do PDF ou o arquivo est√° vazio');
    }
    
    const textoExtraido = pdfData.text;
    console.log(`‚úÖ Extra√ß√£o bem-sucedida. Tamanho do texto: ${textoExtraido.length} caracteres`);
    
    // Se o texto for muito pequeno, pode ser um sinal de problemas na extra√ß√£o
    if (textoExtraido.length < 100 && pdfBuffer.length > 10000) {
      console.warn(`‚ö†Ô∏è Aten√ß√£o: Texto extra√≠do muito pequeno (${textoExtraido.length} caracteres) para um PDF relativamente grande (${Math.round(pdfBuffer.length/1024)}KB)`);
    }
    
    // Se o PDF tiver muitas p√°ginas, vamos melhorar o texto extra√≠do com a OpenAI
    if (pdfData.numpages > 5) {
      console.log(`üîÑ PDF com ${pdfData.numpages} p√°ginas detectado. Melhorando texto com OpenAI...`);
      
      try {
        // Enviar o texto extra√≠do para a OpenAI melhorar a formata√ß√£o
        const melhoriasResponse = await axios.post(API_URL, {
          model: "gpt-4o",
          messages: [
            {
              role: "system",
              content: "Voc√™ √© um assistente especializado em melhorar textos extra√≠dos de PDFs. Seu trabalho √© apenas corrigir problemas √≥bvios de formata√ß√£o, remover caracteres estranhos e garantir que par√°grafos estejam bem formatados. Mantenha EXATAMENTE o mesmo conte√∫do sem adicionar ou remover informa√ß√µes."
            },
            {
              role: "user",
              content: `Este √© um texto extra√≠do de um PDF com ${pdfData.numpages} p√°ginas. Por favor, corrija apenas problemas de formata√ß√£o, mant√©m EXATAMENTE o mesmo conte√∫do: \n\n${textoExtraido.substring(0, 15000)}`
            }
          ],
          temperature: 0.1,
          max_tokens: 4000
        }, {
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${OPENAI_API_KEY}`
          }
        });
        
        if (melhoriasResponse.data && melhoriasResponse.data.choices && melhoriasResponse.data.choices.length > 0) {
          const textoMelhorado = melhoriasResponse.data.choices[0].message.content;
          console.log(`‚úÖ Texto melhorado com sucesso via OpenAI. Novo tamanho: ${textoMelhorado.length} caracteres`);
          return textoMelhorado;
        }
      } catch (melhoriaError) {
        // Se falhar a melhoria, apenas continuamos com o texto original
        console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel melhorar o texto via OpenAI: ${melhoriaError.message}. Continuando com o texto original.`);
      }
    }
    
    return textoExtraido;
  } catch (error) {
    console.error('üí• Erro ao processar PDF:', error.message);
    throw new Error(`Falha ao extrair texto do PDF: ${error.message}`);
  }
}

// Rota de teste
app.get('/status', (req, res) => {
  res.json({ 
    status: 'online',
    message: 'Servidor funcionando corretamente!'
  });
});

// Prompt personalizado solicitado pelo usu√°rio
const customPrompt = `Voc√™ √© um assistente jur√≠dico preciso especializado em an√°lise de contratos. 
Sua tarefa √© analisar SOMENTE o texto do contrato fornecido sem inventar informa√ß√µes que n√£o estejam presentes.

ATEN√á√ÉO: Analise SOMENTE o conte√∫do real do contrato que foi enviado. N√ÉO invente informa√ß√µes que n√£o est√£o explicitamente no texto.

Importantes diretrizes:
1. Cite literalmente trechos do contrato em sua an√°lise
2. Se n√£o houver informa√ß√µes sobre um aspecto, indique claramente: "O contrato n√£o menciona..." 
3. Seja objetivo e factual, baseando-se apenas no texto fornecido
4. N√£o presuma informa√ß√µes ausentes nem crie hip√≥teses n√£o fundamentadas no texto
5. N√£o invente informa√ß√µes que n√£o est√£o no texto

Inicie sua resposta com um breve par√°grafo introdut√≥rio apresentando o escopo da an√°lise, seguindo este modelo: "Segue a auditoria jur√≠dica detalhada do [NOME DO CONTRATO], com base nos crit√©rios estabelecidos. A an√°lise est√° organizada por cl√°usula, apontando problemas identificados, sugest√µes de melhoria, justificativas e implica√ß√µes para as partes."

Analise juridicamente os seguintes aspectos APENAS SE PRESENTES no contrato:

1. Clareza e precis√£o da linguagem ‚úçÔ∏è
2. Cobertura adequada de todos os termos e condi√ß√µes essenciais üìã
3. Prote√ß√£o legal para todas as partes envolvidas ‚öñÔ∏è
4. Conformidade com leis e regulamentos atuais üìú
5. Potenciais Ambiguidades ou lacunas üß©
6. Detectar potenciais riscos e inconformidades nos termos contratuais üõë
7. Equil√≠brio entre partes ü§ù
8. Cl√°usulas de rescis√£o e resolu√ß√£o de disputas üîç
9. Defini√ß√µes claras de termos-chave üìù
10. Adaptabilidade a mudan√ßas futuras üí∞
11. Poss√≠veis riscos ou vulnerabilidades legais üõë
12. Examinar cl√°usulas de pagamento üí∞
13. Confidencialidade e resolu√ß√£o de disputas üîí

Para cada cl√°usula relevante do contrato, estruture assim:

üîπ **CL√ÅUSULA X ‚Äì [T√çTULO DA CL√ÅUSULA]**

**Problema:**

    [cite o trecho espec√≠fico e descreva o problema ou preocupa√ß√£o identificada]

**Recomenda√ß√£o:**

    [sugest√£o concreta de otimiza√ß√£o detalhada para abordar o problema]

**Justificativa:**

    [base jur√≠dica legal ou pr√°tica para a mudan√ßa sugerida]

**Implica√ß√µes:**

    [consequ√™ncias e poss√≠veis implica√ß√µes da mudan√ßa para outras partes do contrato]

**Melhorias e renegocia√ß√µes:**

    [apresente sugest√µes concretas de melhorias e renegocia√ß√µes que possam beneficiar as partes envolvidas]

Depois de analisar todas as cl√°usulas relevantes, OBRIGATORIAMENTE inclua estas se√ß√µes finais, mesmo que algumas fiquem curtas:

‚ö†Ô∏è CL√ÅUSULAS INCOMUNS / INOVADORAS BEN√âFICAS:[Liste cl√°usulas que se destacam positivamente]

‚≠ê **N√çVEL DE RISCO**: [Classifique o risco como Alto, M√©dio ou Baixo, com justificativa]

üìù **RESUMO FACTUAL**: [Apresente um resumo objetivo de 3-5 linhas sobre o que consta no documento]

üîé **AN√ÅLISE JUR√çDICA**: [Resumo da an√°lise das principais cl√°usulas existentes]

‚è∞ **PRAZOS**: [Liste APENAS prazos expressamente mencionados no contrato]

üí° **RECOMENDA√á√ïES**: [Liste as 3-5 principais recomenda√ß√µes para problemas concretos identificados de forma clara e estruturada]

√â OBRIGAT√ìRIO incluir TODAS estas seis se√ß√µes finais na sua resposta!`;

// Prompt para reescrita de cl√°usulas contratuais
const alteracaoPrompt = `## üìù Prompt para Reescrita Contratual com Base em Auditoria Jur√≠dica

### üìå Introdu√ß√£o:
Com base na auditoria jur√≠dica realizada, reescreva as cl√°usulas do contrato que foram observadas na an√°lise contratual, incorporando todas as recomenda√ß√µes apontadas.

---

### üìã Regras:

- Inicie sua resposta com a frase: **"Segue sugest√£o para as cl√°usulas apontadas."**
- Reescreva apenas os par√°grafos das cl√°usulas do contrato que foram identificadas na an√°lise jur√≠dica.
- **Mantenha a numera√ß√£o original das cl√°usulas**.
- Reformule apenas as cl√°usulas indicadas, incorporando:
  - Clareza
  - Precis√£o
  - Seguran√ßa jur√≠dica
  - Equil√≠brio entre as partes
  - Conformidade legal atual
  - Prote√ß√£o de dados

- Utilize **linguagem jur√≠dica adequada e objetiva**.

---

### ‚úèÔ∏è Marca√ß√£o de Altera√ß√µes:

- Use **negrito** para destacar **novos trechos inclu√≠dos** na cl√°usula.
- Use ~~tachado~~ para **trechos removidos ou substitu√≠dos**.
- Se preferir, use emojis ou bullet points para facilitar a visualiza√ß√£o das altera√ß√µes.`;

// Rota para analisar texto diretamente
app.post('/analisar-texto', async (req, res) => {
  try {
    const textoContrato = req.body.texto;
    console.log('üëâ Corpo da requisi√ß√£o:', JSON.stringify(req.body).substring(0, 150));
    
    if (!textoContrato) {
      console.error('‚ùå Erro: Texto n√£o fornecido na requisi√ß√£o');
      return res.status(400).json({ 
        success: false, 
        error: 'Texto n√£o fornecido' 
      });
    }
    
    console.log(`üîç Recebido texto para an√°lise direta [${textoContrato.length} caracteres]: ${textoContrato.substring(0, 100)}...`);
    
    // Criar um nome de arquivo tempor√°rio para o texto
    const tempFileName = `texto_${Date.now()}`;
    const tempFilePath = path.join(os.tmpdir(), `${tempFileName}.txt`);
    
    try {
      // Salvar o texto em um arquivo tempor√°rio
      fs.writeFileSync(tempFilePath, textoContrato, 'utf8');
      console.log(`üìÑ Texto salvo em arquivo tempor√°rio: ${tempFilePath}`);
      
      // Armazenar o texto para uso posterior na reescrita de cl√°usulas
      ultimoTextoAnalisado = textoContrato;
      
      // Fazer requisi√ß√£o para a API da OpenAI com o prompt personalizado
      console.log('üîÑ Iniciando an√°lise do texto com a API da OpenAI...');
      const response = await axios.post(API_URL, {
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: customPrompt
          },
          {
            role: "user",
            content: textoContrato
          }
        ],
        temperature: 0.2,
        top_p: 0.9,
        max_tokens: 4000
      }, {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${OPENAI_API_KEY}`
        }
      });
      
      // Extrair conte√∫do da resposta
      const content = response.data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error("Resposta da API da OpenAI n√£o cont√©m o conte√∫do esperado");
      }
      
      console.log('‚úÖ An√°lise conclu√≠da com sucesso');
      
      // Limpar arquivo tempor√°rio ap√≥s processamento
      try {
        fs.unlinkSync(tempFilePath);
        console.log(`üóëÔ∏è Arquivo tempor√°rio removido: ${tempFilePath}`);
      } catch (cleanupError) {
        console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel remover o arquivo tempor√°rio: ${tempFilePath}`, cleanupError);
      }
      
      // Estrutura de resposta igual √† rota /analisar-arquivo
      const responseData = {
        success: true,
        fileName: tempFileName,  // Sem extens√£o .txt, como a outra rota
        analysis: content,
        format: "text"
      };
      
      console.log(`üì¶ Enviando resposta para o frontend: ${JSON.stringify(responseData).substring(0, 150)}...`);
      
      // Retornar an√°lise como texto formatado junto com o nome do arquivo
      return res.json(responseData);
      
    } catch (apiError) {
      console.error('‚ùå Erro ao comunicar com a API da OpenAI:', apiError.message);
      if (apiError.response) {
        console.error('Detalhes da resposta de erro:', JSON.stringify(apiError.response.data).substring(0, 200));
      }
      
      // Tentar limpar arquivo tempor√°rio em caso de erro
      try {
        if (fs.existsSync(tempFilePath)) {
          fs.unlinkSync(tempFilePath);
          console.log(`üóëÔ∏è Arquivo tempor√°rio removido ap√≥s erro: ${tempFilePath}`);
        }
      } catch (cleanupError) {
        console.warn(`‚ö†Ô∏è Erro ao remover arquivo tempor√°rio: ${cleanupError.message}`);
      }
      
      return res.status(500).json({
        success: false,
        error: 'Erro ao analisar o contrato',
        message: apiError.message
      });
    }
    
  } catch (error) {
    console.error('üí• Erro no servidor:', error.message);
    return res.status(500).json({
      success: false,
      error: 'Erro interno no servidor',
      message: error.message
    });
  }
});

// Rota para reescrita de cl√°usulas
app.post('/alterar-clausulas', async (req, res) => {
  try {
    // Verificar se temos um texto de contrato armazenado
    if (!ultimoTextoAnalisado) {
      return res.status(400).json({
        success: false,
        error: 'Nenhum contrato foi analisado previamente'
      });
    }
    
    // Obter a an√°lise jur√≠dica (opcional)
    const analiseJuridica = req.body.analise || '';
    
    // Combinar o texto do contrato com a an√°lise jur√≠dica
    let conteudoParaAnalise = ultimoTextoAnalisado;
    if (analiseJuridica) {
      conteudoParaAnalise = `CONTRATO ORIGINAL:\n\n${ultimoTextoAnalisado}\n\nAN√ÅLISE JUR√çDICA:\n\n${analiseJuridica}`;
    }
    
    // Enviar para a API da OpenAI
    const response = await axios.post(API_URL, {
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: alteracaoPrompt
        },
        {
          role: "user",
          content: conteudoParaAnalise
        }
      ],
      temperature: 0.4,
      top_p: 0.9,
      max_tokens: 4000
    }, {
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`
      }
    });
    
    // Extrair conte√∫do da resposta
    const content = response.data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error("Resposta da API da OpenAI n√£o cont√©m o conte√∫do esperado");
    }
    
    // Retornar as cl√°usulas reescritas
    return res.json({
      success: true,
      alteracoes: content,
      format: "text"
    });
    
  } catch (error) {
    console.error('Erro ao processar a altera√ß√£o de cl√°usulas:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro ao processar a altera√ß√£o de cl√°usulas',
      message: error.message
    });
  }
});

// Rota para upload e an√°lise de arquivos
app.post('/analisar-arquivo', upload.single('arquivo'), async (req, res) => {
  try {
    // Verificar se um arquivo foi enviado
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'Nenhum arquivo enviado'
      });
    }
    
    console.log(`Arquivo recebido: ${req.file.originalname} (${req.file.mimetype})`);
    
    try {
      // ETAPA 1: EXTRA√á√ÉO DO TEXTO - Diferentes m√©todos dependendo do tipo de arquivo
      let textoContrato;
      let arquivoTemporarioTxt = null;
      
      // Para arquivos PDF, sempre usar a API da OpenAI para extra√ß√£o e salvar como TXT
      if (req.file.mimetype === 'application/pdf') {
        console.log('PDF detectado: Usando OpenAI para extra√ß√£o de texto...');
        
        try {
          // Ler o PDF como buffer e converter para base64
          const pdfBuffer = fs.readFileSync(req.file.path);
          const pdfBase64 = pdfBuffer.toString('base64');
          const nomeOriginal = req.file.originalname;
          
          // Usar a API OpenAI para extrair o texto do PDF
          const textoExtraido = await extrairTextoPDFComOpenAI(pdfBase64, nomeOriginal);
          console.log(`Extra√ß√£o de texto do PDF via OpenAI conclu√≠da: ${textoExtraido.length} caracteres`);
          
          // Criar nome para arquivo TXT tempor√°rio com base no original
          const nomeBase = path.basename(nomeOriginal, '.pdf');
          arquivoTemporarioTxt = path.join(path.dirname(req.file.path), `${nomeBase}_convertido_${Date.now()}.txt`);
          
          // Salvar o texto extra√≠do como arquivo TXT
          fs.writeFileSync(arquivoTemporarioTxt, textoExtraido, 'utf8');
          console.log(`Texto extra√≠do salvo como TXT: ${arquivoTemporarioTxt}`);
          
          // Agora processar o arquivo TXT normalmente
          textoContrato = fs.readFileSync(arquivoTemporarioTxt, 'utf8');
          console.log(`Arquivo TXT criado e lido com sucesso: ${textoContrato.length} caracteres`);
        } catch (pdfError) {
          console.error('Erro ao processar PDF via OpenAI:', pdfError);
          throw new Error(`Falha ao extrair texto do PDF: ${pdfError.message}`);
        }
      } 
      // Para outros tipos de arquivo, usar m√©todos convencionais
      else {
        textoContrato = await extractTextFromFile(req.file.path, req.file.mimetype);
        console.log(`Extra√ß√£o convencional de texto conclu√≠da: ${textoContrato.length} caracteres`);
      }
      
      // Verificar se o texto foi extra√≠do com sucesso
      if (!textoContrato || textoContrato.trim().length === 0) {
        throw new Error('N√£o foi poss√≠vel extrair texto do arquivo ou o arquivo est√° vazio.');
      }
      
      // Armazenar o texto para uso posterior na reescrita
      ultimoTextoAnalisado = textoContrato;
      
      console.log(`Texto extra√≠do com sucesso. Primeiros 100 caracteres: ${textoContrato.substring(0, 100)}...`);
      
      // ETAPA 2: AN√ÅLISE DO TEXTO - Usando a OpenAI com o prompt personalizado
      console.log('Iniciando an√°lise do texto extra√≠do via OpenAI...');
      const response = await axios.post(API_URL, {
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: customPrompt
          },
          {
            role: "user",
            content: textoContrato
          }
        ],
        temperature: 0.2,
        top_p: 0.9,
        max_tokens: 4000
      }, {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${OPENAI_API_KEY}`
        }
      });
      
      // Extrair conte√∫do da resposta
      const content = response.data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error("Resposta da API da OpenAI n√£o cont√©m o conte√∫do esperado");
      }
      
      console.log('An√°lise jur√≠dica conclu√≠da com sucesso.');
      
      // Limpar arquivos tempor√°rios
      try {
        // Remover o arquivo original
        fs.unlinkSync(req.file.path);
        console.log(`Arquivo tempor√°rio original removido: ${req.file.path}`);
        
        // Remover o arquivo TXT tempor√°rio se foi criado
        if (arquivoTemporarioTxt && fs.existsSync(arquivoTemporarioTxt)) {
          fs.unlinkSync(arquivoTemporarioTxt);
          console.log(`Arquivo TXT tempor√°rio removido: ${arquivoTemporarioTxt}`);
        }
      } catch (cleanupError) {
        console.warn(`N√£o foi poss√≠vel remover arquivos tempor√°rios: ${cleanupError.message}`);
      }
      
      // Retornar an√°lise como texto formatado
      return res.json({
        success: true,
        fileName: req.file.originalname,
        fileType: req.file.mimetype,
        analysis: content,
        format: "text",
        extracted_via: req.file.mimetype === 'application/pdf' ? "openai" : "conventional"
      });
      
    } catch (processingError) {
      console.error('Erro ao processar o arquivo:', processingError);
      
      // Limpar arquivos tempor√°rios em caso de erro
      if (req.file && req.file.path) {
        try {
          // Remover arquivo original
          fs.unlinkSync(req.file.path);
          console.log(`Arquivo tempor√°rio original removido: ${req.file.path}`);
          
          // Remover o arquivo TXT tempor√°rio se foi criado
          if (arquivoTemporarioTxt && fs.existsSync(arquivoTemporarioTxt)) {
            fs.unlinkSync(arquivoTemporarioTxt);
            console.log(`Arquivo TXT tempor√°rio removido ap√≥s erro: ${arquivoTemporarioTxt}`);
          }
        } catch (cleanupError) {
          console.warn(`N√£o foi poss√≠vel remover arquivos tempor√°rios: ${cleanupError.message}`);
        }
      }
      
      return res.status(500).json({
        success: false,
        error: 'Erro ao processar o arquivo',
        message: processingError.message
      });
    }
  } catch (error) {
    console.error('Erro na requisi√ß√£o:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      message: error.message
    });
  }
});

// Rotas para o banco de dados

// Rota para obter todos os contratos
app.get('/api/contratos', async (req, res) => {
  try {
    const contratos = await buscarTodosContratos();
    res.json({
      success: true,
      data: contratos
    });
  } catch (error) {
    console.error('Erro ao buscar contratos:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao buscar contratos',
      message: error.message
    });
  }
});

// Rota para obter um contrato espec√≠fico
app.get('/api/contratos/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const contrato = await buscarContratoPorId(id);
    
    if (!contrato) {
      return res.status(404).json({
        success: false,
        error: 'Contrato n√£o encontrado'
      });
    }
    
    res.json({
      success: true,
      data: contrato
    });
  } catch (error) {
    console.error(`Erro ao buscar contrato com ID ${req.params.id}:`, error);
    res.status(500).json({
      success: false,
      error: 'Erro ao buscar contrato',
      message: error.message
    });
  }
});

// Rota para adicionar um novo contrato
app.post('/api/contratos', async (req, res) => {
  try {
    const novoContrato = req.body;
    
    // Valida√ß√£o b√°sica
    if (!novoContrato.titulo || !novoContrato.conteudo || !novoContrato.nivel_risco) {
      return res.status(400).json({
        success: false,
        error: 'Dados incompletos',
        message: 'Os campos t√≠tulo, conte√∫do e n√≠vel de risco s√£o obrigat√≥rios'
      });
    }
    
    const contratoAdicionado = await adicionarContrato(novoContrato);
    
    res.status(201).json({
      success: true,
      message: 'Contrato adicionado com sucesso',
      data: contratoAdicionado
    });
  } catch (error) {
    console.error('Erro ao adicionar contrato:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao adicionar contrato',
      message: error.message
    });
  }
});

// Rota para atualizar um contrato
app.put('/api/contratos/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const dadosAtualizacao = req.body;
    
    // Verificar se o contrato existe
    const contratoExistente = await buscarContratoPorId(id);
    if (!contratoExistente) {
      return res.status(404).json({
        success: false,
        error: 'Contrato n√£o encontrado'
      });
    }
    
    // Atualizar o contrato
    const contratoAtualizado = await atualizarContrato(id, dadosAtualizacao);
    
    res.json({
      success: true,
      message: 'Contrato atualizado com sucesso',
      data: contratoAtualizado
    });
  } catch (error) {
    console.error(`Erro ao atualizar contrato com ID ${req.params.id}:`, error);
    res.status(500).json({
      success: false,
      error: 'Erro ao atualizar contrato',
      message: error.message
    });
  }
});

// Rota para excluir um contrato
app.delete('/api/contratos/:id', async (req, res) => {
  try {
    const id = req.params.id;
    
    // Verificar se o contrato existe
    const contratoExistente = await buscarContratoPorId(id);
    if (!contratoExistente) {
      return res.status(404).json({
        success: false,
        error: 'Contrato n√£o encontrado'
      });
    }
    
    // Excluir o contrato
    const excluido = await excluirContrato(id);
    
    if (excluido) {
      res.json({
        success: true,
        message: 'Contrato exclu√≠do com sucesso'
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Erro ao excluir contrato',
        message: 'N√£o foi poss√≠vel excluir o contrato'
      });
    }
  } catch (error) {
    console.error(`Erro ao excluir contrato com ID ${req.params.id}:`, error);
    res.status(500).json({
      success: false,
      error: 'Erro ao excluir contrato',
      message: error.message
    });
  }
});

// Modifica√ß√£o da rota /analisar-arquivo para salvar no banco de dados
app.post('/api/analisar-e-salvar', upload.single('file'), async (req, res) => {
  try {
    // Usa a rota existente para analisar o arquivo
    const response = await axios.post(`http://localhost:${PORT}/analisar-arquivo`, req.body, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    
    if (response.data && response.data.success) {
      const analise = response.data.analysis;
      
      // Extrair n√≠vel de risco da an√°lise
      let nivelRisco = 'medio'; // Valor padr√£o
      if (analise.includes('N√çVEL DE RISCO: Alto') || analise.includes('N√çVEL DE RISCO: ALTO')) {
        nivelRisco = 'alto';
      } else if (analise.includes('N√çVEL DE RISCO: Baixo') || analise.includes('N√çVEL DE RISCO: BAIXO')) {
        nivelRisco = 'baixo';
      }
      
      // Extrair resumo, recomenda√ß√µes e prazos
      let resumo = '';
      let recomendacoes = '';
      let prazos = '';
      
      // Tenta extrair resumo
      const resumoMatch = analise.match(/RESUMO FACTUAL:[\s\S]*?(?=(AN√ÅLISE JUR√çDICA:|PRAZOS:|RECOMENDA√á√ïES:|$))/i);
      if (resumoMatch) resumo = resumoMatch[0].trim();
      
      // Tenta extrair recomenda√ß√µes
      const recomendacoesMatch = analise.match(/RECOMENDA√á√ïES:[\s\S]*?(?=$)/i);
      if (recomendacoesMatch) recomendacoes = recomendacoesMatch[0].trim();
      
      // Tenta extrair prazos
      const prazosMatch = analise.match(/PRAZOS:[\s\S]*?(?=(RECOMENDA√á√ïES:|$))/i);
      if (prazosMatch) prazos = prazosMatch[0].trim();
      
      // Criar objeto para o banco de dados
      const novoContrato = {
        titulo: req.body.titulo || 'Contrato sem t√≠tulo',
        conteudo: ultimoTextoAnalisado,
        analise: analise,
        nivel_risco: nivelRisco,
        recomendacoes: recomendacoes,
        prazos: prazos
      };
      
      // Salvar no banco de dados
      const contratoSalvo = await adicionarContrato(novoContrato);
      
      res.json({
        success: true,
        message: 'Contrato analisado e salvo com sucesso',
        analysis: analise,
        contrato: contratoSalvo
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Erro ao analisar o arquivo',
        message: response.data.message || 'Ocorreu um erro na an√°lise'
      });
    }
  } catch (error) {
    console.error('Erro ao analisar e salvar contrato:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao analisar e salvar contrato',
      message: error.message
    });
  }
});

// Inicializar o servidor e o banco de dados
async function inicializarServidor() {
  try {
    // Testar conex√£o com o banco de dados
    const conexaoBD = await testConnection();
    if (conexaoBD) {
      // Criar tabelas se n√£o existirem
      await criarTabelaContratos();
      console.log('‚úÖ Banco de dados inicializado com sucesso');
    } else {
      console.error('‚ùå N√£o foi poss√≠vel conectar ao banco de dados. O servidor continuar√° funcionando, mas sem persist√™ncia de dados.');
    }
    
    // Iniciar o servidor HTTP
    app.listen(PORT, () => {
      console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                  ‚ïë
‚ïë  üöÄ Servidor AdvContro rodando na porta ${PORT}        ‚ïë
‚ïë                                                  ‚ïë
‚ïë  ‚Ä¢ Acesse: http://localhost:${PORT}                    ‚ïë
‚ïë  ‚Ä¢ Acesse: http://localhost:${PORT}/upload             ‚ïë
‚ïë  ‚Ä¢ API: /analisar-texto e /analisar-arquivo      ‚ïë
‚ïë  ‚Ä¢ Banco de dados: ${conexaoBD ? '‚úÖ Conectado' : '‚ùå Desconectado'} ‚ïë
‚ïë                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
      `);
    });
  } catch (error) {
    console.error('Erro ao inicializar o servidor:', error);
  }
}

// Iniciar o servidor
inicializarServidor();
