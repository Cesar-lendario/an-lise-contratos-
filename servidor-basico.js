// Servidor simples sem depend√™ncias problem√°ticas
import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';
import multer from 'multer';
import mammoth from 'mammoth';
import axios from 'axios';

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configura√ß√£o b√°sica
const app = express();
const PORT = 3000;

// Solu√ß√£o simplificada para CORS
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', '*');
  res.setHeader('Access-Control-Allow-Credentials', true);
  
  // Responder imediatamente a requisi√ß√µes OPTIONS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  next();
});

// Configurar armazenamento para upload de arquivos
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, 'uploads');
    // Criar pasta de uploads se n√£o existir
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: function (req, file, cb) {
    // Aceitar apenas arquivos txt, pdf e docx
    if (file.mimetype === 'text/plain' ||
        file.mimetype === 'application/pdf' ||
        file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
      cb(null, true);
    } else {
      cb(new Error('Formato de arquivo n√£o suportado. Use apenas TXT, PDF ou DOCX.'), false);
    }
  }
});

// Middleware para processar JSON
app.use(express.json({ limit: '50mb' }));
app.use(express.text({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Servir arquivos est√°ticos
app.use(express.static(__dirname));

// Rota para a p√°gina principal
app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'teste-upload.html'));
});

// Rota para a p√°gina de upload
app.get('/upload', function(req, res) {
  res.sendFile(path.join(__dirname, 'teste-upload.html'));
});

// Fun√ß√£o para extrair texto dos diferentes tipos de arquivos
async function extractTextFromFile(filePath, fileType) {
  try {
    console.log(`Extraindo texto de: ${filePath} (${fileType})`);
    
    // Para arquivos de texto simples (TXT)
    if (fileType === 'text/plain') {
      return fs.readFileSync(filePath, 'utf8');
    }
    
    // Para arquivos PDF - m√©todo simplificado
    else if (fileType === 'application/pdf') {
      try {
        // M√©todo simplificado para fins de teste
        // Em produ√ß√£o, use uma biblioteca robusta para PDF
        const fileContent = fs.readFileSync(filePath);
        const fileSize = fileContent.length;
        return `Conte√∫do do arquivo PDF: ${path.basename(filePath)} (${fileSize} bytes)
        
CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS

Este √© um texto extra√≠do do PDF enviado. Para uma extra√ß√£o completa, 
seria necess√°rio implementar uma biblioteca espec√≠fica para processamento de PDF.

Por favor, para testes completos, use arquivos TXT ou DOCX que t√™m suporte completo.`;
      } catch (pdfError) {
        console.error('Erro ao processar o PDF:', pdfError);
        throw new Error('N√£o foi poss√≠vel extrair texto do arquivo PDF.');
      }
    }
    
    // Para arquivos DOCX
    else if (fileType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
      try {
        const docxBuffer = fs.readFileSync(filePath);
        const result = await mammoth.extractRawText({ buffer: docxBuffer });
        return result.value;
      } catch (docxError) {
        console.error('Erro ao extrair texto do DOCX:', docxError);
        throw new Error('N√£o foi poss√≠vel extrair texto do arquivo DOCX.');
      }
    }
    
    throw new Error('Formato de arquivo n√£o suportado.');
  } catch (error) {
    console.error('Erro na extra√ß√£o de texto:', error);
    throw error;
  }
}

// Chave da API da OpenAI
// Carrega as vari√°veis de ambiente do arquivo .env
require('dotenv').config();

// Obter a chave da API de forma segura
const getApiKey = () => {
  if (process.env.OPENAI_API_KEY) {
    return process.env.OPENAI_API_KEY;
  }
  console.warn('\x1b[33m%s\x1b[0m', '‚ö†Ô∏è ALERTA: Nenhuma chave de API encontrada! Configure OPENAI_API_KEY no arquivo .env');
  return 'SUA_CHAVE_API_AQUI'; // Certifique-se de substituir no .env antes de usar
};

const OPENAI_API_KEY = getApiKey();
const API_URL = "https://api.openai.com/v1/chat/completions";

// Rota de teste
app.get('/status', (req, res) => {
  res.json({ 
    status: 'online',
    message: 'Servidor funcionando corretamente!'
  });
});

// Rota para analisar texto diretamente
app.post('/analisar-texto', async (req, res) => {
  try {
    const textoContrato = req.body.texto;
    
    if (!textoContrato) {
      return res.status(400).json({ 
        success: false, 
        error: 'Texto n√£o fornecido' 
      });
    }
    
    console.log(`Recebido texto para an√°lise: ${textoContrato.substring(0, 100)}...`);
    
    try {
      // Fazer requisi√ß√£o para a API da OpenAI
      const response = await axios.post(API_URL, {
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um assistente jur√≠dico preciso especializado em an√°lise de contratos. 
Sua tarefa √© analisar SOMENTE o texto do contrato fornecido sem inventar informa√ß√µes que n√£o estejam presentes.

ATEN√á√ÉO: Analise SOMENTE o conte√∫do real do contrato que foi enviado. N√ÉO invente informa√ß√µes que n√£o est√£o explicitamente no texto.

Importantes diretrizes:
1. Cite literalmente trechos do contrato em sua an√°lise
2. Se n√£o houver informa√ß√µes sobre um aspecto, indique claramente: "O contrato n√£o menciona..." 
3. Seja objetivo e factual, baseando-se apenas no texto fornecido
4. N√£o presuma informa√ß√µes ausentes nem crie hip√≥teses n√£o fundamentadas no texto

Analise os seguintes aspectos APENAS SE PRESENTES no contrato:

1. Clareza da linguagem ‚úçÔ∏è
2. Termos essenciais üìã
3. Prote√ß√£o legal ‚öñÔ∏è
4. Conformidade legal üìú
5. Ambiguidades üß©
6. Riscos contratuais üõë
7. Equil√≠brio entre partes ü§ù
8. Rescis√£o üîç
9. Termos-chave üìù
10. Pagamento üí∞
11. Confidencialidade üîí

Para cada item relevante encontrado NO TEXTO DO CONTRATO, use este formato:

- Cl√°usula X: [cite o n√∫mero/nome exato da cl√°usula]
  - **Problema**: [cite o trecho espec√≠fico e descreva o problema]
  - **Recomenda√ß√£o**: [sugest√£o concreta]
  - **Justificativa**: [base jur√≠dica]
  - **Implica√ß√£o**: [consequ√™ncias]

Estruture sua an√°lise assim:

‚≠ê **N√çVEL DE RISCO**: Classifica√ß√£o baseada apenas nos problemas identificados

üìÑ **RESUMO FACTUAL**: Resumo objetivo do que consta no documento

üîé **AN√ÅLISE JUR√çDICA**: Apenas das cl√°usulas existentes no documento

‚è∞ **PRAZOS**: Somente prazos expressamente mencionados

üí° **RECOMENDA√á√ïES**: Para problemas concretos identificados`
          },
          {
            role: "user",
            content: textoContrato
          }
        ],
        temperature: 0.2,
        top_p: 0.9,
        max_tokens: 4000
      }, {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${OPENAI_API_KEY}`
        }
      });
      
      // Extrair conte√∫do da resposta
      const content = response.data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error("Resposta da API da OpenAI n√£o cont√©m o conte√∫do esperado");
      }
      
      // Verificar se a resposta √© v√°lida e cont√©m texto
      if (!content || content.trim().length === 0) {
        throw new Error('A resposta da API n√£o cont√©m texto v√°lido');
      }
      
      // Imprimir o conte√∫do para debug
      console.log('Resposta recebida da API:', content.substring(0, 100) + '...');
      
      // Usar a resposta como est√°
      const analysisResult = content;
      
      // Retornar an√°lise como texto formatado
      return res.json({
        success: true,
        analysis: analysisResult,
        format: "text"
      });
      
    } catch (apiError) {
      console.error('Erro ao comunicar com a API da OpenAI:', apiError);
      return res.status(500).json({
        success: false,
        error: 'Erro ao analisar o contrato',
        message: apiError.message
      });
    }
    
  } catch (error) {
    console.error('Erro no servidor:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro interno no servidor',
      message: error.message
    });
  }
});

// Rota para upload e an√°lise de arquivos
app.post('/analisar-arquivo', upload.single('arquivo'), async (req, res) => {
  try {
    // Verificar se um arquivo foi enviado
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'Nenhum arquivo enviado'
      });
    }
    
    console.log(`Arquivo recebido: ${req.file.originalname} (${req.file.mimetype})`);
    
    try {
      // Extrair texto do arquivo
      const textoContrato = await extractTextFromFile(req.file.path, req.file.mimetype);
      
      if (!textoContrato || textoContrato.trim().length === 0) {
        throw new Error('N√£o foi poss√≠vel extrair texto do arquivo ou o arquivo est√° vazio.');
      }
      
      console.log(`Texto extra√≠do com sucesso: ${textoContrato.substring(0, 100)}...`);
      
      // Analisar o contrato com a OpenAI
      const response = await axios.post(API_URL, {
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© um assistente jur√≠dico preciso especializado em an√°lise de contratos. 
Sua tarefa √© analisar SOMENTE o texto do contrato fornecido sem inventar informa√ß√µes que n√£o estejam presentes.

ATEN√á√ÉO: Analise SOMENTE o conte√∫do real do contrato que foi enviado. N√ÉO invente informa√ß√µes que n√£o est√£o explicitamente no texto.

Importantes diretrizes:
1. Cite literalmente trechos do contrato em sua an√°lise
2. Se n√£o houver informa√ß√µes sobre um aspecto, indique claramente: "O contrato n√£o menciona..." 
3. Seja objetivo e factual, baseando-se apenas no texto fornecido
4. N√£o presuma informa√ß√µes ausentes nem crie hip√≥teses n√£o fundamentadas no texto

Analise os seguintes aspectos APENAS SE PRESENTES no contrato:

1. Clareza da linguagem ‚úçÔ∏è
2. Termos essenciais üìã
3. Prote√ß√£o legal ‚öñÔ∏è
4. Conformidade legal üìú
5. Ambiguidades üß©
6. Riscos contratuais üõë
7. Equil√≠brio entre partes ü§ù
8. Rescis√£o üîç
9. Termos-chave üìù
10. Pagamento üí∞
11. Confidencialidade üîí

Para cada item relevante encontrado NO TEXTO DO CONTRATO, use este formato:

- Cl√°usula X: [cite o n√∫mero/nome exato da cl√°usula]
  - **Problema**: [cite o trecho espec√≠fico e descreva o problema]
  - **Recomenda√ß√£o**: [sugest√£o concreta]
  - **Justificativa**: [base jur√≠dica]
  - **Implica√ß√£o**: [consequ√™ncias]

Estruture sua an√°lise assim:

‚≠ê **N√çVEL DE RISCO**: Classifica√ß√£o baseada apenas nos problemas identificados

üìÑ **RESUMO FACTUAL**: Resumo objetivo do que consta no documento

üîé **AN√ÅLISE JUR√çDICA**: Apenas das cl√°usulas existentes no documento

‚è∞ **PRAZOS**: Somente prazos expressamente mencionados

üí° **RECOMENDA√á√ïES**: Para problemas concretos identificados`
          },
          {
            role: "user",
            content: textoContrato
          }
        ],
        temperature: 0.2,
        top_p: 0.9,
        max_tokens: 4000
      }, {
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${OPENAI_API_KEY}`
        }
      });
      
      // Extrair conte√∫do da resposta
      const content = response.data.choices[0]?.message?.content;
      
      if (!content) {
        throw new Error("Resposta da API da OpenAI n√£o cont√©m o conte√∫do esperado");
      }
      
      // Verificar se a resposta √© v√°lida e cont√©m texto
      if (!content || content.trim().length === 0) {
        throw new Error('A resposta da API n√£o cont√©m texto v√°lido');
      }
      
      // Imprimir o conte√∫do para debug
      console.log('Resposta recebida da API:', content.substring(0, 100) + '...');
      
      // Usar a resposta como est√°
      const analysisResult = content;
      
      // Limpar arquivo tempor√°rio
      try {
        fs.unlinkSync(req.file.path);
        console.log(`Arquivo tempor√°rio removido: ${req.file.path}`);
      } catch (cleanupError) {
        console.warn(`N√£o foi poss√≠vel remover o arquivo tempor√°rio: ${cleanupError.message}`);
      }
      
      // Retornar an√°lise como texto formatado
      return res.json({
        success: true,
        fileName: req.file.originalname,
        fileType: req.file.mimetype,
        analysis: analysisResult,
        format: "text"
      });
      
    } catch (processingError) {
      console.error('Erro ao processar o arquivo:', processingError);
      
      // Limpar arquivo tempor√°rio em caso de erro
      if (req.file && req.file.path) {
        try {
          fs.unlinkSync(req.file.path);
        } catch (cleanupError) {
          console.warn(`N√£o foi poss√≠vel remover o arquivo tempor√°rio: ${cleanupError.message}`);
        }
      }
      
      return res.status(500).json({
        success: false,
        error: 'Erro ao processar o arquivo',
        message: processingError.message
      });
    }
  } catch (error) {
    console.error('Erro na requisi√ß√£o:', error);
    return res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      message: error.message
    });
  }
});

app.listen(PORT, () => {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                  ‚ïë
‚ïë  üöÄ Servidor AdvContro rodando na porta ${PORT}        ‚ïë
‚ïë                                                  ‚ïë
‚ïë  ‚Ä¢ Acesse: http://localhost:${PORT}                    ‚ïë
‚ïë  ‚Ä¢ Acesse: http://localhost:${PORT}/upload             ‚ïë
‚ïë  ‚Ä¢ API: /analisar-texto e /analisar-arquivo      ‚ïë
‚ïë                                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
});
